#!/usr/bin/env bash

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

_global_variables() {
  start_date=""
  cache_dir=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    "bootnode" \
    "go-ethereum"
  _check_cmd \
    "geth" \
    "go-ethereum"
  _check_cmd \
    "jq"
}

_chain_id_get() {
  local \
    _chain_id \
    _genesis
  _genesis="$( \
    _get_lib)/data-blockchain/genesis.json"
  _chain_id="$( \
    cat \
      "${_genesis}" | \
      jq \
        '.[].chainId' 2>/dev/null)" || \
    true
  echo \
    "${_chain_id}"
}

_miner() {
  local \
    _conf_dir="${1}" \
    _geth_opts=() \
    _boot_node_address \
    _boot_node_port \
    _boot_node_key_hex \
    _boot_node_key_path \
    _data_chain_id \
    _http_api_opts
  _boot_node_key_path="${HOME}/.ethereum/geth/nodekey"
  _boot_node_address="127.0.0.1"
  _boot_node_port="30303"
  _data_chain_id="$( \
    _chain_id_get)"
  _boot_node_key_hex="$( \
    bootnode \
      -nodekey \
      "${_node_key_path}" \
      -writeaddress)"
  _http_api_opts_setup
  _geth_opts=(
     --datadir
       "${_conf_dir}"
     --bootnodes
       "enode://${_boot_node_key_hex}@${_boot_node_address}:${_boot_node_port}"
     --mine
     --miner.threads
       1
     --networkid
       "${_data_chain_id}"
  )
  geth \
    "${_geth_opts[@]}"
}

_conf_dir_auto_detect() {
  local \
    _conf_dir
  _conf_dir="${HOME}/.config/data-blockchain/miner"
  if [[ "${conf_dir}" == "" ]]; then
    mkdir \
      -p \
      "${_conf_dir}" || \
      true
    chmod \
      700 \
      "${_conf_dir}"
  fi
  _set_override \
    "conf" \
    "dir" \
    "${_conf_dir}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "start" \
    "date" \
    "$(_get_date_human)"
  _conf_dir_auto_detect
}

_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "               Start date:   ${start_date}"
  _msg_info "  Configuration directory:   ${conf_dir}"
}

_globals
_global_variables
_requirements
while \
  getopts \
    'C:cvh?' \
    arg; do
  case \
    "${arg}" in
    C) override_conf_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
_set_overrides
_show_config
app_opts=(
  "${conf_dir}"
)
_miner \
  "${app_opts[@]}"
